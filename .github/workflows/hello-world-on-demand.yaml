name: Build and Deploy Hello World service

on:
  pull_request:
env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  GCR_ZONE: ${{ secrets.GCR_ZONE }}
  WORKLOAD_IDENTITY: ${{ secrets.WORKLOAD_IDENTITY }}
  SERVICE_ACCOUNT: ${{ secrets.SERVICE_ACCOUNT }}
  IMAGE: hello-world
  CHART_NAME: hello-world

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: "google-github-actions/auth@v1"
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY }}
          service_account: ${{ env.SERVICE_ACCOUNT }}

      # Configure docker to use the gcloud command-line tool as a credential helper
      - run: |-
          gcloud --quiet auth configure-docker

      # Get the GKE credentials so we can deploy to the cluster
      - uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      - name: Add short sha env
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV

        # Build the Docker image
      - name: Build
        run: |-
          docker build \
            --tag "$GCR_ZONE/$PROJECT_ID/$IMAGE:$GITHUB_HEAD_REF-$SHORT_SHA" \
            --tag "$GCR_ZONE/$PROJECT_ID/$IMAGE:$GITHUB_HEAD_REF-latest" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_HEAD_REF="$GITHUB_HEAD_REF" \
            .

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          docker push "$GCR_ZONE/$PROJECT_ID/$IMAGE:$GITHUB_HEAD_REF-$SHORT_SHA"
          docker push "$GCR_ZONE/$PROJECT_ID/$IMAGE:$GITHUB_HEAD_REF-latest"

      # Set up helm
      - name: Set up Helm
        working-directory: ./helm
        run: |-
          wget https://get.helm.sh/helm-v3.7.1-linux-amd64.tar.gz && tar xzvf helm-v3.7.1-linux-amd64.tar.gz
          sudo mv linux-amd64/helm /usr/bin && sudo chmod a+x /usr/bin/helm
          rm -rf helm-v3.7.1-linux-amd64.tar.gz linux-amd64

      # Set up sops
      - name: Set up Helm
        working-directory: ./helm
        run: |-
          wget https://github.com/mozilla/sops/releases/download/v3.7.3/sops-v3.7.3.linux
          sudo mv sops-v3.7.3.linux /usr/bin/sops && sudo chmod a+x /usr/bin/sops

      - name: Install Helm plugins and repos
        working-directory: ./helm/
        run: |-
          helm plugin install https://github.com/hayorov/helm-gcs.git
          helm plugin install https://github.com/jkroepke/helm-secrets --version v3.8.2
          helm repo add private ${{ secrets.HELM_REPO }}

      - name: Build Helm Chart
        working-directory: ./helm
        run: |-
          helm dependency update
          tarName=$(helm package ./ --version "1.0.0-$GITHUB_HEAD_REF-$SHORT_SHA" | cut -d: -f2 | sed 's/ //g' | sed 's/.*\///g')
          helm gcs push "$tarName" private --force --retry
          tarName=$(helm package ./ --version "1.0.0-$GITHUB_HEAD_REF-latest" | cut -d: -f2 | sed 's/ //g' | sed 's/.*\///g')
          helm gcs push "$tarName" private --force --retry

      - name: Deploy Helm Chart To Environment
        if: contains(github.event.pull_request.title,'on-demand')
        working-directory: ./helm
        run: |-
          ENV_NAME=`echo "${{ github.event.pull_request.title }}" | awk -F 'on-demand' '{print $2}' | cut -d: -f2 | awk '{print $1}'`
          echo $ENV_NAME
          helm repo update
          helm upgrade  --install "$CHART_NAME"  "private/$CHART_NAME" \
          --set base.image.stableTag="$GITHUB_HEAD_REF-$SHORT_SHA" \
          --set base.ingress.host="hello-world-${ENV_NAME}.lab.com" \
          --version="1.0.0-$GITHUB_HEAD_REF-$SHORT_SHA" \
          -f values.yaml -n "${ENV_NAME}"